// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.32989
//    <NameSpace>Developpez.MagazineTool</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Developpez.MagazineTool {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Magazine.xsd")]
    [System.Xml.Serialization.XmlRootAttribute("Magazine", Namespace="http://tempuri.org/Magazine.xsd", IsNullable=false)]
    public partial class MagazineType {
        
        private int numeroField;
        
        private string dateField;
        
        private string realisateurField;
        
        private CouvertureType couvertureField;
        
        private string editoField;
        
        private List<MagazineTypeCategorie> categoriesField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public MagazineType() {
            this.categoriesField = new List<MagazineTypeCategorie>();
            this.couvertureField = new CouvertureType();
        }
        
        public int Numero {
            get {
                return this.numeroField;
            }
            set {
                this.numeroField = value;
            }
        }
        
        public string Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        public string Realisateur {
            get {
                return this.realisateurField;
            }
            set {
                this.realisateurField = value;
            }
        }
        
        public CouvertureType Couverture {
            get {
                return this.couvertureField;
            }
            set {
                this.couvertureField = value;
            }
        }
        
        public string Edito {
            get {
                return this.editoField;
            }
            set {
                this.editoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Categorie", IsNullable=false)]
        public List<MagazineTypeCategorie> Categories {
            get {
                return this.categoriesField;
            }
            set {
                this.categoriesField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(MagazineType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current MagazineType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an MagazineType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output MagazineType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out MagazineType obj, out System.Exception exception) {
            exception = null;
            obj = default(MagazineType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out MagazineType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static MagazineType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((MagazineType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current MagazineType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an MagazineType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MagazineType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out MagazineType obj, out System.Exception exception) {
            exception = null;
            obj = default(MagazineType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out MagazineType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static MagazineType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Magazine.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/Magazine.xsd", IsNullable=true)]
    public partial class CouvertureType {
        
        private List<ArticleType> articlesField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public CouvertureType() {
            this.articlesField = new List<ArticleType>();
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Article", IsNullable=false)]
        public List<ArticleType> Articles {
            get {
                return this.articlesField;
            }
            set {
                this.articlesField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CouvertureType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CouvertureType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CouvertureType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CouvertureType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CouvertureType obj, out System.Exception exception) {
            exception = null;
            obj = default(CouvertureType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CouvertureType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CouvertureType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CouvertureType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CouvertureType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CouvertureType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CouvertureType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CouvertureType obj, out System.Exception exception) {
            exception = null;
            obj = default(CouvertureType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CouvertureType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CouvertureType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Magazine.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/Magazine.xsd", IsNullable=true)]
    public partial class ArticleType {
        
        private string titreField;
        
        private string rubriqueField;
        
        private string resumeField;
        
        private List<AuteurType> auteursField;
        
        private List<SectionType> sectionsField;
        
        private List<ImageType> imagesField;
        
        private string idField;
        
        private string refField;
        
        private string fileNameField;
        
        private string uRLField;
        
        private bool misEnAvantField;
        
        private int misEnAvantOrdreField;
        
        private bool completField;
        
        private SourceEnum sourceField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public ArticleType() {
            this.imagesField = new List<ImageType>();
            this.sectionsField = new List<SectionType>();
            this.auteursField = new List<AuteurType>();
            this.misEnAvantField = false;
            this.misEnAvantOrdreField = 1;
            this.completField = true;
        }
        
        public string Titre {
            get {
                return this.titreField;
            }
            set {
                this.titreField = value;
            }
        }
        
        public string Rubrique {
            get {
                return this.rubriqueField;
            }
            set {
                this.rubriqueField = value;
            }
        }
        
        public string Resume {
            get {
                return this.resumeField;
            }
            set {
                this.resumeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Auteur", IsNullable=false)]
        public List<AuteurType> Auteurs {
            get {
                return this.auteursField;
            }
            set {
                this.auteursField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Section", IsNullable=false)]
        public List<SectionType> Sections {
            get {
                return this.sectionsField;
            }
            set {
                this.sectionsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Image", IsNullable=false)]
        public List<ImageType> Images {
            get {
                return this.imagesField;
            }
            set {
                this.imagesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Ref {
            get {
                return this.refField;
            }
            set {
                this.refField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string URL {
            get {
                return this.uRLField;
            }
            set {
                this.uRLField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool MisEnAvant {
            get {
                return this.misEnAvantField;
            }
            set {
                this.misEnAvantField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(1)]
        public int MisEnAvantOrdre {
            get {
                return this.misEnAvantOrdreField;
            }
            set {
                this.misEnAvantOrdreField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool Complet {
            get {
                return this.completField;
            }
            set {
                this.completField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public SourceEnum Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ArticleType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ArticleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ArticleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ArticleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ArticleType obj, out System.Exception exception) {
            exception = null;
            obj = default(ArticleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ArticleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ArticleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ArticleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ArticleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ArticleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ArticleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ArticleType obj, out System.Exception exception) {
            exception = null;
            obj = default(ArticleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ArticleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ArticleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Magazine.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/Magazine.xsd", IsNullable=true)]
    public partial class AuteurType {
        
        private string nomField;
        
        private string nomCompletField;
        
        private string uRLField;
        
        private string pagePersonnelleField;
        
        private AuteurRoleEnum roleField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string Nom {
            get {
                return this.nomField;
            }
            set {
                this.nomField = value;
            }
        }
        
        public string NomComplet {
            get {
                return this.nomCompletField;
            }
            set {
                this.nomCompletField = value;
            }
        }
        
        public string URL {
            get {
                return this.uRLField;
            }
            set {
                this.uRLField = value;
            }
        }
        
        public string PagePersonnelle {
            get {
                return this.pagePersonnelleField;
            }
            set {
                this.pagePersonnelleField = value;
            }
        }
        
        public AuteurRoleEnum Role {
            get {
                return this.roleField;
            }
            set {
                this.roleField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AuteurType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AuteurType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AuteurType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AuteurType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AuteurType obj, out System.Exception exception) {
            exception = null;
            obj = default(AuteurType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AuteurType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AuteurType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AuteurType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AuteurType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AuteurType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AuteurType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AuteurType obj, out System.Exception exception) {
            exception = null;
            obj = default(AuteurType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AuteurType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AuteurType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Magazine.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/Magazine.xsd", IsNullable=false)]
    public enum AuteurRoleEnum {
        
        /// <remarks/>
        Auteur,
        
        /// <remarks/>
        Correcteur,
        
        /// <remarks/>
        Gabarisateur,
        
        /// <remarks/>
        RelecteurTechnique,
        
        /// <remarks/>
        Traducteur,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Magazine.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/Magazine.xsd", IsNullable=true)]
    public partial class ImageType {
        
        private string srcField;
        
        private string tailleField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Src {
            get {
                return this.srcField;
            }
            set {
                this.srcField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Taille {
            get {
                return this.tailleField;
            }
            set {
                this.tailleField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ImageType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ImageType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ImageType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ImageType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ImageType obj, out System.Exception exception) {
            exception = null;
            obj = default(ImageType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ImageType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ImageType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ImageType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ImageType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ImageType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ImageType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ImageType obj, out System.Exception exception) {
            exception = null;
            obj = default(ImageType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ImageType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ImageType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Magazine.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/Magazine.xsd", IsNullable=true)]
    public partial class SectionType {
        
        private List<SectionType> sectionField;
        
        private int numeroField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public SectionType() {
            this.sectionField = new List<SectionType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Section")]
        public List<SectionType> Section {
            get {
                return this.sectionField;
            }
            set {
                this.sectionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Numero {
            get {
                return this.numeroField;
            }
            set {
                this.numeroField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SectionType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SectionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SectionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SectionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SectionType obj, out System.Exception exception) {
            exception = null;
            obj = default(SectionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SectionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SectionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SectionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SectionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SectionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SectionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SectionType obj, out System.Exception exception) {
            exception = null;
            obj = default(SectionType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SectionType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SectionType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Magazine.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/Magazine.xsd", IsNullable=false)]
    public enum SourceEnum {
        
        /// <remarks/>
        Article,
        
        /// <remarks/>
        Actualite,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tempuri.org/Magazine.xsd")]
    public partial class MagazineTypeCategorie {
        
        private List<ArticleType> articlesField;
        
        private string nomField;
        
        private string iconeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public MagazineTypeCategorie() {
            this.articlesField = new List<ArticleType>();
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Article", IsNullable=false)]
        public List<ArticleType> Articles {
            get {
                return this.articlesField;
            }
            set {
                this.articlesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Nom {
            get {
                return this.nomField;
            }
            set {
                this.nomField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Icone {
            get {
                return this.iconeField;
            }
            set {
                this.iconeField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(MagazineTypeCategorie));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current MagazineTypeCategorie object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an MagazineTypeCategorie object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output MagazineTypeCategorie object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out MagazineTypeCategorie obj, out System.Exception exception) {
            exception = null;
            obj = default(MagazineTypeCategorie);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out MagazineTypeCategorie obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static MagazineTypeCategorie Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((MagazineTypeCategorie)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current MagazineTypeCategorie object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an MagazineTypeCategorie object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MagazineTypeCategorie object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out MagazineTypeCategorie obj, out System.Exception exception) {
            exception = null;
            obj = default(MagazineTypeCategorie);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out MagazineTypeCategorie obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static MagazineTypeCategorie LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Magazine.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/Magazine.xsd", IsNullable=false)]
    public enum LangageEnum {
        
        /// <remarks/>
        actionscript,
        
        /// <remarks/>
        ada95,
        
        /// <remarks/>
        al,
        
        /// <remarks/>
        antlr,
        
        /// <remarks/>
        apacheconf,
        
        /// <remarks/>
        apdl,
        
        /// <remarks/>
        applescript,
        
        /// <remarks/>
        @as,
        
        /// <remarks/>
        asp,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("aspect-j")]
        aspectj,
        
        /// <remarks/>
        aspnet,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("assembly-m68k")]
        assemblym68k,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("assembly-macro32")]
        assemblymacro32,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("assembly-mcs51")]
        assemblymcs51,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("assembly-parrot")]
        assemblyparrot,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("assembly-r2000")]
        assemblyr2000,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("assembly-x86")]
        assemblyx86,
        
        /// <remarks/>
        asymptote,
        
        /// <remarks/>
        awk,
        
        /// <remarks/>
        b,
        
        /// <remarks/>
        batch,
        
        /// <remarks/>
        bbj,
        
        /// <remarks/>
        bcb,
        
        /// <remarks/>
        bcel,
        
        /// <remarks/>
        beanshell,
        
        /// <remarks/>
        bibtex,
        
        /// <remarks/>
        c,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c++")]
        c1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c#")]
        c2,
        
        /// <remarks/>
        ceylon,
        
        /// <remarks/>
        chill,
        
        /// <remarks/>
        cil,
        
        /// <remarks/>
        cobol,
        
        /// <remarks/>
        coldfusion,
        
        /// <remarks/>
        cmake,
        
        /// <remarks/>
        cpp,
        
        /// <remarks/>
        csharp,
        
        /// <remarks/>
        cshtml,
        
        /// <remarks/>
        css,
        
        /// <remarks/>
        cuda,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cvs-commit")]
        cvscommit,
        
        /// <remarks/>
        d,
        
        /// <remarks/>
        dart,
        
        /// <remarks/>
        delphi,
        
        /// <remarks/>
        delphinet,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("docker-compose")]
        dockercompose,
        
        /// <remarks/>
        dockerfile,
        
        /// <remarks/>
        doxygen,
        
        /// <remarks/>
        dragonflybsd,
        
        /// <remarks/>
        dsssl,
        
        /// <remarks/>
        eiffel,
        
        /// <remarks/>
        embperl,
        
        /// <remarks/>
        erlang,
        
        /// <remarks/>
        factor,
        
        /// <remarks/>
        forth,
        
        /// <remarks/>
        fortran,
        
        /// <remarks/>
        foxpro,
        
        /// <remarks/>
        freebsd,
        
        /// <remarks/>
        freemarker,
        
        /// <remarks/>
        fsharp,
        
        /// <remarks/>
        gettext,
        
        /// <remarks/>
        glsl,
        
        /// <remarks/>
        gnuplot,
        
        /// <remarks/>
        go,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gradle-build")]
        gradlebuild,
        
        /// <remarks/>
        groovy,
        
        /// <remarks/>
        haskell,
        
        /// <remarks/>
        hex,
        
        /// <remarks/>
        hlsl,
        
        /// <remarks/>
        htaccess,
        
        /// <remarks/>
        html,
        
        /// <remarks/>
        i4gl,
        
        /// <remarks/>
        icon,
        
        /// <remarks/>
        idl,
        
        /// <remarks/>
        inform,
        
        /// <remarks/>
        ini,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inno-setup")]
        innosetup,
        
        /// <remarks/>
        interlis,
        
        /// <remarks/>
        io,
        
        /// <remarks/>
        java,
        
        /// <remarks/>
        javacc,
        
        /// <remarks/>
        javascript,
        
        /// <remarks/>
        jcl,
        
        /// <remarks/>
        jhtml,
        
        /// <remarks/>
        jmk,
        
        /// <remarks/>
        js,
        
        /// <remarks/>
        json,
        
        /// <remarks/>
        jsp,
        
        /// <remarks/>
        jsx,
        
        /// <remarks/>
        latex,
        
        /// <remarks/>
        lilypond,
        
        /// <remarks/>
        linux,
        
        /// <remarks/>
        lisp,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("literate-haskell")]
        literatehaskell,
        
        /// <remarks/>
        lotos,
        
        /// <remarks/>
        lua,
        
        /// <remarks/>
        mail,
        
        /// <remarks/>
        makefile,
        
        /// <remarks/>
        maple,
        
        /// <remarks/>
        mathematica,
        
        /// <remarks/>
        matlab,
        
        /// <remarks/>
        ml,
        
        /// <remarks/>
        modula3,
        
        /// <remarks/>
        moin,
        
        /// <remarks/>
        mqsc,
        
        /// <remarks/>
        myghty,
        
        /// <remarks/>
        n3,
        
        /// <remarks/>
        netbsd,
        
        /// <remarks/>
        netrexx,
        
        /// <remarks/>
        nqc,
        
        /// <remarks/>
        nsis2,
        
        /// <remarks/>
        obasic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("objective-c")]
        objectivec,
        
        /// <remarks/>
        objectrexx,
        
        /// <remarks/>
        ocaml,
        
        /// <remarks/>
        occam,
        
        /// <remarks/>
        omnimark,
        
        /// <remarks/>
        openbsd,
        
        /// <remarks/>
        oracle,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        pascal,
        
        /// <remarks/>
        patch,
        
        /// <remarks/>
        perl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("perl-uniligne")]
        perluniligne,
        
        /// <remarks/>
        perso,
        
        /// <remarks/>
        php,
        
        /// <remarks/>
        php_mixte,
        
        /// <remarks/>
        pike,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pl-sql")]
        plsql,
        
        /// <remarks/>
        pl1,
        
        /// <remarks/>
        pop11,
        
        /// <remarks/>
        postgresql,
        
        /// <remarks/>
        postscript,
        
        /// <remarks/>
        povray,
        
        /// <remarks/>
        powerdynamo,
        
        /// <remarks/>
        powershell,
        
        /// <remarks/>
        progress,
        
        /// <remarks/>
        prolog,
        
        /// <remarks/>
        properties,
        
        /// <remarks/>
        psp,
        
        /// <remarks/>
        ptl,
        
        /// <remarks/>
        purebasic,
        
        /// <remarks/>
        pvwave,
        
        /// <remarks/>
        pyrex,
        
        /// <remarks/>
        python,
        
        /// <remarks/>
        qml,
        
        /// <remarks/>
        qt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("qt-pro")]
        qtpro,
        
        /// <remarks/>
        r,
        
        /// <remarks/>
        rd,
        
        /// <remarks/>
        rdf,
        
        /// <remarks/>
        rebol,
        
        /// <remarks/>
        redcode,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("relax-ng-compact")]
        relaxngcompact,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("renderman-rib")]
        rendermanrib,
        
        /// <remarks/>
        rest,
        
        /// <remarks/>
        rhtml,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rpm-spec")]
        rpmspec,
        
        /// <remarks/>
        rtf,
        
        /// <remarks/>
        ruby,
        
        /// <remarks/>
        rust,
        
        /// <remarks/>
        rview,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s+")]
        s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s#")]
        s1,
        
        /// <remarks/>
        sas,
        
        /// <remarks/>
        scala,
        
        /// <remarks/>
        scilab,
        
        /// <remarks/>
        scheme,
        
        /// <remarks/>
        scss,
        
        /// <remarks/>
        sgml,
        
        /// <remarks/>
        shell,
        
        /// <remarks/>
        shellscript,
        
        /// <remarks/>
        shtml,
        
        /// <remarks/>
        slate,
        
        /// <remarks/>
        smalltalk,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sdl/pr")]
        sdlpr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("smi-mib")]
        smimib,
        
        /// <remarks/>
        sql,
        
        /// <remarks/>
        sqr,
        
        /// <remarks/>
        squidconf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("svn-commit")]
        svncommit,
        
        /// <remarks/>
        swift,
        
        /// <remarks/>
        swig,
        
        /// <remarks/>
        tcl,
        
        /// <remarks/>
        tex,
        
        /// <remarks/>
        texinfo,
        
        /// <remarks/>
        text,
        
        /// <remarks/>
        tpl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("transact-sql")]
        transactsql,
        
        /// <remarks/>
        twig,
        
        /// <remarks/>
        twiki,
        
        /// <remarks/>
        typescript,
        
        /// <remarks/>
        typoscript,
        
        /// <remarks/>
        uscript,
        
        /// <remarks/>
        vala,
        
        /// <remarks/>
        vb,
        
        /// <remarks/>
        vbnet,
        
        /// <remarks/>
        vbscript,
        
        /// <remarks/>
        velocity,
        
        /// <remarks/>
        verilog,
        
        /// <remarks/>
        vhdl,
        
        /// <remarks/>
        windev,
        
        /// <remarks/>
        xml,
        
        /// <remarks/>
        xq,
        
        /// <remarks/>
        xsl,
        
        /// <remarks/>
        zpt,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Magazine.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/Magazine.xsd", IsNullable=false)]
    public enum LienLangueEnum {
        
        /// <remarks/>
        Fr,
        
        /// <remarks/>
        En,
        
        /// <remarks/>
        Faq,
        
        /// <remarks/>
        Src,
        
        /// <remarks/>
        Srcs,
        
        /// <remarks/>
        Icozip,
        
        /// <remarks/>
        Icopdf,
        
        /// <remarks/>
        Dico,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Magazine.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/Magazine.xsd", IsNullable=false)]
    public enum LienTargetEnum {
        
        /// <remarks/>
        _blank,
        
        /// <remarks/>
        _parent,
        
        /// <remarks/>
        _top,
        
        /// <remarks/>
        _self,
        
        /// <remarks/>
        _search,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Magazine.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/Magazine.xsd", IsNullable=false)]
    public enum AlignementEnum {
        
        /// <remarks/>
        Gauche,
        
        /// <remarks/>
        Centre,
        
        /// <remarks/>
        Droite,
    }
}
